class Logger
{
public: 
		Logger * setNext(Logger * log)
		{
			next = log;
			return log;
		}
		void message(string msg, int priority)
		{
			if (priority <= mask) {
				writeMessage(msg);
			}
			if (next != 0) {
				message(msg, priority);
			}
		}
protected:
int complexity; //Сложность 
Logger * next;
		   int mask;
		   void writeMessage(string msg)
		   {
			   cout << msg << endl;
		   }
};

class StdOutLogger : protected Logger
{
public:
	StdOutLogger(int mask)
	{
		this->mask = mask;
	}
protected: 
	void writeMessage(string msg)
	{
		cout << "stdout" << endl;
	}
};

class EmailLogger : protected Logger
{
public: 
	EmailLogger(int mask)
	{
		this->mask = mask;
	}
protected:
	void writeMessage(string msg)
	{
		cout << "Email" << endl;
	}
};

class StderrLogger : protected Logger 
{
public:
	StderrLogger(int mask) {
		this->mask = mask;
	}
protected:
	void writeMessage(string msg) {
		cout << "stderr" << endl;
	}
};

#include <iostream>
#include <string>

using namespace std;

class CriminalAction {

	friend class Policeman;     // Полицейские имеют доступ к материалам следствия

	int complexity;             // Сложность дела

	const char* description;    // Краткое описание преступления

public:
	CriminalAction(int complexity, const char* description) : complexity(complexity), description(description) {}

};

class Policeman {

protected:

	int deduction;      // дедукция (умение распутывать сложные дела) у данного полицейского

	Policeman* next;    // более умелый полицейский, который получит дело, если для текущего оно слишком сложное

	virtual void investigateConcrete(const char* description) {}    // собственно расследование

public:

	Policeman(int deduction) : deduction(deduction) {}

	virtual ~Policeman() {
		if (next) {
			delete next;
		}
	}

	/**
	* Добавляет в цепочку ответственности более опытного полицейского, который сможет принять на себя
	* расследование, если текущий не справится
	*/
	Policeman* setNext(Policeman* policeman) {
		next = policeman;
		return next;
	}

	/**
	* Полицейский начинает расследование или, если дело слишком сложное, передает ее более опытному коллеге
	*/
	void investigate(CriminalAction* criminalAction) {
		if (deduction < criminalAction->complexity) {
			if (next) {
				next->investigate(criminalAction);
			}
			else {
				std::cout << "Это дело не раскрыть никому." << std::endl;
			}
		}
		else {
			investigateConcrete(criminalAction->description);
		}
	}
};

class MartinRiggs : public Policeman {

protected:

	void investigateConcrete(const char* description) {
		std::cout << "Расследование по делу \"" << description << "\" ведет сержант Мартин Риггс" << std::endl;
	}

public:

	MartinRiggs(int deduction) : Policeman(deduction) {}
};

class JohnMcClane : public Policeman {

protected:

	void investigateConcrete(const char* description) {
		std::cout << "Расследование по делу \"" << description << "\" ведет детектив Джон Макклейн" << std::endl;
	}

public:
	JohnMcClane(int deduction) : Policeman(deduction) {}
};

class VincentHanna : public Policeman {

protected:

	void investigateConcrete(const char* description) {
		std::cout << "Расследование по делу \"" << description << "\" ведет лейтенант Винсент Ханна" << std::endl;
	}

public:
	VincentHanna(int deduction) : Policeman(deduction) {}
};

int main() {
	setlocale(LC_ALL, "RUS");
	std::cout << "OUTPUT:" << std::endl;
	Policeman* policeman = new MartinRiggs(3);  // полицейский с наименьшим навыком ведения расследований
	policeman
		->setNext(new JohnMcClane(5))
		->setNext(new VincentHanna(8));     // добавляем ему двух опытных коллег
	policeman->investigate(new CriminalAction(2, "Торговля наркотиками из Вьетнама"));
	policeman->investigate(new CriminalAction(7, "Дерзкое ограбление банка в центре Лос-Анджелеса"));
	policeman->investigate(new CriminalAction(5, "Серия взрывов в центре Нью-Йорка"));
	//_______________________________________________
	int ERR = 3; int NOTICE = 5; int DEBUG = 7;
	system("pause");
	return 0;
}
